name: Build & Test
on: [push, pull_request]
jobs:
  make-release:
    name: Publish release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [build-ubuntu, build-macos, build-windows, package-deb, package-rpm]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download all build artifacts
        uses: actions/download-artifact@v3
      - name: Create Release
        shell: bash
        run: |
          tag_name="${GITHUB_REF##*/}"
          mkdir release
          mv $(find . -mindepth 1 -maxdepth 2 -type d -name 'libSMCE-*' -printf '%p/* ') release/
          cd release
          mkdir hashes
          for alg in md5 sha1 sha224 sha256 sha384 sha512; do
            "${alg}sum" $(find . -maxdepth 1 -type f | sed 's/.\///') > hashes/$alg.txt
          done
          mv hashes/* ./
          rmdir hashes
          hub release create $(find . -type f -printf "-a %p ") -m "libSMCE $tag_name" "$tag_name"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  coverage-linux:
    name: libSMCE (coverage) - Linux
    runs-on: ubuntu-latest
    container: ubuntu:hirsute
    env:
      DEBIAN_FRONTEND: "noninteractive"
    steps:
      - uses: actions/checkout@v3
      - name: Check deps
        run: |
          apt-get update
          apt-get install -y lcov curl wget git cmake ninja-build g++ libmosquitto-dev pkg-config jq perl-base
          ninja --version
          cmake --version
          wget -O Juniper.deb https://www.juniper-lang.org/installers/Juniper-3.0.0.deb
          apt-get install ./Juniper.deb
      - name: Setup global CMake interceptor
        run: ci/setup-cmake-interceptor.sh
      - name: CMake configure
        run: |
          cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DSMCE_COVERAGE=On \
          -DSMCE_BUILD_STATIC=Off \
          -DSMCE_CXXRT_LINKING=SHARED \
          -DSMCE_MOSQUITTO_LINKING=SHARED \
          -DSMCE_TEST_JUNIPER=On \
          -B ./build
      - name: CMake build
        run: cmake --build ./build
      - name: Build & Run tests
        run: |
          cmake --build ./build --target SMCE_Tests
          (cd build/test/; ctest --output-on-failure)
      - name: Collect C++ coverage information
        run: |
          lcov --directory . --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' "$(pwd)/test/*" "$(pwd)/build/*" --output-file coverage.info
          lcov --list coverage.info
      - name: Collect CMake coverage information
        run: |
          ci/scan-cmake-commands.sh
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./coverage.info,./cmake-codecov-report.json
      - name: Upload traces
        uses: 'actions/upload-artifact@v2'
        with:
          name: cmcov-traces
          path: CMakeTrace/
  debug-cxxstdlib:
    name: libSMCE - ${{ matrix.lib }} Debug mode
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - lib: libstdc++
            os: ubuntu-latest
            c: gcc-10
            cxx: g++-10
          - lib: libc++
            os: ubuntu-latest
            c: clang-14
            cxx: clang++-14 -stdlib=libc++
    env:
      CC: ${{ matrix.c }}
      CXX: ${{ matrix.cxx }}
    steps:
      - name: Grab more recent Clang/LLVM
        if: matrix.lib == 'libc++'
        run: |
          sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
          sudo apt-get update && sudo apt-get install -y clang-14 libc++-14-dev libc++abi-14-dev
      - uses: actions/checkout@v3
      - run: ci/setup-cmake-interceptor.sh
      - run: cmake -DSMCE_BUILD_PROFILE=CxxStdLibDebug -S . -B build
      - run: cmake --build build/ --target SMCE_Tests
      - run: (cd build/test/; ctest --output-on-failure)
      - run: ci/scan-cmake-commands.sh
      - uses: codecov/codecov-action@v2
        with:
          files: ./cmake-codecov-report.json

  build-ubuntu:
    name: libSMCE - Ubuntu (${{ matrix.compiler.name }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - name: GCC 10
            c: gcc-10
            cxx: g++-10
            release: true
          - name: Clang/LLVM 12
            c: clang-12
            cxx: clang++-12
            release: true
          - name: Clang/LLVM 11
            c: clang-11
            cxx: clang++-11
            release: false
          - name: Clang/LLVM 10
            c: clang-10
            cxx: clang++-10
            release: false
    env:
      CC: ${{ matrix.compiler.c }}
      CXX: ${{ matrix.compiler.cxx }}
    steps:
      - uses: actions/checkout@v3
      - name: Check deps
        run: |
          sudo apt install ninja-build
          ninja --version
          cmake --version
      - name: CMake configure
        run: |
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DSMCE_CXXRT_LINKING=STATIC \
            -DSMCE_OPENSSL_LINKING=STATIC \
            -S ./ -B ./build
      - name: CMake build
        run: cmake --build ./build
      - name: Build & Run tests
        run: |
          cmake --build ./build --target SMCE_Tests
          (cd build/test/; ctest --output-on-failure)
      - name: Package
        run: |
          mkdir ./build/packages
          (cd build/; cpack -B packages)
          rm -rd build/packages/_CPack_Packages
      - name: Upload artifacts
        if: matrix.compiler.release
        uses: 'actions/upload-artifact@v2'
        with:
          name: libSMCE-ubuntu-${{ matrix.compiler.c }}
          path: build/packages/*

  build-macos:
    name: libSMCE - macOS (${{ matrix.compiler.name }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - name: GCC 11
            release: true
            slug: gcc
            c: gcc-11
            cxx: g++-11
          - name: GCC 10
            release: false
            slug: gcc
            c: gcc-10
            cxx: g++-10
          - name: Clang/LLVM 13
            release: true
            slug: clang
            c: clang-13
            cxx: clang++-13
          - name: AppleClang 12
            release: true
            slug: appleclang
            c: clang
            cxx: clang++
    env:
      CC: ${{ matrix.compiler.c }}
      CXX: ${{ matrix.compiler.cxx }}
    steps:
      - uses: actions/checkout@v3
      - name: Check deps
        run: |
          brew install ninja openssl@3 bash
          curl -sL https://github.com/AeroStun/brew-lipo/raw/master/brew-lipo.sh | bash -s openssl@3
          ninja --version
          cmake --version
      - name: Setup global CMake interceptor
        run: ci/setup-cmake-interceptor.sh
      - name: CMake configure
        if: matrix.compiler.slug == 'appleclang'
        run: |
          export OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)
          mkdir build
          cmake -G Ninja \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15\
            -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" \
            -DCMAKE_BUILD_TYPE=Release \
            -DSMCE_CXXRT_LINKING=STATIC \
            -DSMCE_OPENSSL_LINKING=STATIC \
            -S ./ -B ./build
      - name: CMake configure
        if: matrix.compiler.slug != 'appleclang'
        run: |
          export OPENSSL_ROOT_DIR=$(brew --prefix openssl@3)
          [ "${{ matrix.compiler.slug }}" = "clang" ] && export CC="$(brew --prefix llvm)/bin/clang -stdlib=libc++ -nostdinc++ -I/usr/local/opt/llvm/include/c++/v1 -L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib -Wno-unused-command-line-argument"
          [ "${{ matrix.compiler.slug }}" = "clang" ] && export CXX="$(brew --prefix llvm)/bin/clang++ -stdlib=libc++ -nostdinc++ -I/usr/local/opt/llvm/include/c++/v1 -L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib -Wno-unused-command-line-argument"
          mkdir build
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DSMCE_CXXRT_LINKING=STATIC \
            -DSMCE_OPENSSL_LINKING=STATIC \
            -S ./ -B ./build
      - name: CMake build
        run: cmake --build ./build
      - name: Build & Run tests
        run: |
          [ "${{ matrix.compiler.slug }}" = "clang" ] && export CC="$(brew --prefix llvm)/bin/clang -stdlib=libc++ -nostdinc++ -I/usr/local/opt/llvm/include/c++/v1 -L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib -Wno-unused-command-line-argument"
          [ "${{ matrix.compiler.slug }}" = "clang" ] && export CXX="$(brew --prefix llvm)/bin/clang++ -stdlib=libc++ -nostdinc++ -I/usr/local/opt/llvm/include/c++/v1 -L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib -Wno-unused-command-line-argument"
          cmake --build ./build --target SMCE_Tests
          (cd build/test/; ctest --output-on-failure)
      - name: Package
        run: |
          mkdir ./build/packages
          (cd build/; cpack -B packages)
          rm -rd build/packages/_CPack_Packages
      - name: Upload artifacts
        if: matrix.compiler.release
        uses: 'actions/upload-artifact@v2'
        with:
          name: libSMCE-macos-${{ matrix.compiler.slug }}
          path: build/packages/*
      - name: Collect CMake coverage information
        run: ci/scan-cmake-commands.sh
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./cmake-codecov-report.json

  build-windows:
    name: libSMCE - Windows ${{ matrix.build_type }} (${{ matrix.compiler.name }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        compiler:
          - name: MSVC
            c: cl
            cxx: cl
#         - name: Clang/LLVM
#           c: clang-cl
#           cxx: clang++-cl
#   env:
#     CC: ${{ matrix.compiler.c }}
#     CXX: ${{ matrix.compiler.cxx }}
    steps:
      - uses: actions/checkout@v3
      - run: mkdir C:\local
      - name: Check deps
        shell: bash
        run: |
          choco install ninja openssl > silence
          ninja --version
      - uses: ilammy/msvc-dev-cmd@v1
      - name: CMake configure
        run: |
          mkdir build
          cmake -G Ninja `
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
            -DSMCE_CXXRT_LINKING=SHARED `
            -DSMCE_OPENSSL_LINKING=STATIC `
            -DCPACK_PACKAGE_DIRECTORY=packages `
            -S ./ -B ./build
      - name: CMake build
        run: cmake --build ./build
      - name: Build & Run tests
        run: |
          cmake --build ./build --target SMCE_Tests
          cd build/test
          ctest --output-on-failure
      - name: Package
        run: |
          mkdir ./build/packages
          cd build
          cmake --build . --target package
          rm -R packages/_CPack_Packages
          cd ..
      - name: Upload artifacts
        uses: 'actions/upload-artifact@v2'
        with:
          name: libSMCE-windows-${{ matrix.compiler.c }}
          path: build/packages/*
  build-arch:
    name: libSMCE - ArchLinux (${{ matrix.compiler.name }})
    runs-on: ubuntu-latest
    container: archlinux:base-devel
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - name: GCC
            c: gcc
            cxx: g++
          - name: Clang/LLVM
            c: clang
            cxx: clang++
    env:
      CC: ${{ matrix.compiler.c }}
      CXX: ${{ matrix.compiler.cxx }}
    steps:
      - run: cd ~
      - uses: actions/checkout@v3
      - name: Check deps
        run: |
          pacman -Syu --noconfirm git cmake openssl ninja
          if [ "${{ matrix.compiler.c }}" = "clang" ];
          then
            pacman -Syu --noconfirm clang
          fi
          ninja --version
      - name: CMake configure
        run: |
          mkdir build
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DSMCE_CXXRT_LINKING=SHARED \
            -DSMCE_OPENSSL_LINKING=SHARED \
            -S ./ -B ./build
      - name: CMake build
        run: cmake --build ./build
      - name: Build & Run tests
        run: |
          cmake --build ./build --target SMCE_Tests
          cd build/test
          ctest --output-on-failure
  build-fedora:
    name: libSMCE - Fedora Rawhide (${{ matrix.compiler.name }})
    runs-on: ubuntu-latest
    container:
      image: fedora:rawhide
      options: --security-opt seccomp=unconfined
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - name: GCC
            c: gcc
            cxx: g++
            pkg: gcc-c++
          - name: Clang/LLVM
            c: clang
            cxx: clang++
            pkg: clang
    env:
      CC: ${{ matrix.compiler.c }}
      CXX: ${{ matrix.compiler.cxx }}
    steps:
      - run: cd ~
      - uses: actions/checkout@v3
      - name: Check deps
        run: |
          dnf -y install ${{ matrix.compiler.pkg }} curl git cmake ninja-build mosquitto-devel
          ninja --version
      - name: CMake configure
        run: |
          cmake -G Ninja \
            -DSMCE_BUILD_SHARED=On \
            -DSMCE_BUILD_STATIC=On \
            -DSMCE_CXXRT_LINKING=SHARED \
            -DSMCE_ARDRIVO_MQTT=On \
            -DSMCE_MOSQUITTO_LINKING=SHARED \
            -DSMCE_ARDRIVO_OV767X=On \
            -S ./ -B ./build
      - name: CMake build
        run: cmake --build ./build
      - name: Build & Run tests
        run: |
          cmake --build ./build --target SMCE_Tests
          (cd build/test; ctest --output-on-failure)

  build-openmandriva:
    name: libSMCE - OpenMandriva Lx Cooker (${{ matrix.compiler.name }})
    runs-on: ubuntu-latest
    container:
      image: openmandriva/cooker:latest
      options: --security-opt seccomp=unconfined
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - name: GCC
            pkg: gcc-c++
            c: gcc
            cxx: g++
          - name: Clang/LLVM
            pkg: clang
            c: clang
            cxx: clang++
    env:
      CC: ${{ matrix.compiler.c }}
      CXX: ${{ matrix.compiler.cxx }}
    steps:
      - run: cd ~
      - uses: actions/checkout@v3
      - name: Check deps
        run: |
          dnf -y install curl git cmake ninja ${{ matrix.compiler.pkg }} glibc-devel lib64openssl-devel
          ninja --version

          if [[ -f /usr/lib64/librt.so ]]; then
            echo "This hotfix is no longer needed" && exit 255
          else
            ln -s /lib64/librt.so.1 /usr/lib64/librt.so
          fi
      - name: CMake configure
        run: |
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DSMCE_CXXRT_LINKING=SHARED \
            -DSMCE_OPENSSL_LINKING=SHARED \
            -S ./ -B ./build
      - name: CMake build
        run: cmake --build ./build
      - name: Build & Run tests
        run: |
          cmake --build ./build --target SMCE_Tests
          cd build/test
          ctest --output-on-failure

  package-deb:
    name: Package per-distro DEBs (${{ matrix.os.name }} ${{ matrix.os.codename }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: Debian
            codename: Bookworm
            image: debian:bookworm
          - name: Debian
            codename: Bullseye
            image: gcc:11-bullseye
          - name: Debian
            codename: Buster
            image: gcc:10-buster
          - name: Ubuntu
            codename: Jammy
            image: ubuntu:jammy
          - name: Ubuntu
            codename: Impish
            image: ubuntu:impish
          - name: Ubuntu
            codename: Hirsute
            image: ubuntu:hirsute
          - name: Ubuntu
            codename: Focal
            image: ubuntu:focal
    container:
      image: ${{ matrix.os.image }}
      options: --security-opt seccomp=unconfined
    env:
      DEBIAN_FRONTEND: "noninteractive"
      CMAKE_VERSION: 3.23.1
    steps:
      - name: Setup workdir
        run: mkdir /tmp/wk && cd /tmp/wk
      - uses: actions/checkout@v3
      - name: Fetch deps
        id: deps
        run: |
          apt-get update -y
          apt-get install -y file dpkg-dev pkg-config wget # CMake's dpkg-shlibdeps support needs 'file'
          apt-get install -y perl jq # For cmcov
          git --version || apt-get install -y git
          ninja --version || apt-get install -y ninja-build
          wget https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-linux-x86_64.sh
          chmod +x cmake-$CMAKE_VERSION-linux-x86_64.sh
          ./cmake-$CMAKE_VERSION-linux-x86_64.sh --skip-license --prefix=/usr/local
          [ "$(g++ --version | grep -oP '\d+' | head -n1)0" -ge 100 ] || ci/install-highest-gcc.sh # GCC 10 required for C++2a
          apt-get install -y libssl-dev
      - name: Setup global CMake interceptor
        run: ci/setup-cmake-interceptor.sh
      - name: CMake Configure
        run: cmake -G Ninja  -DSMCE_BUILD_PROFILE=${{ matrix.os.name }}${{ matrix.os.codename }} -S ./ -B ./build
      - name: CMake Build
        run: cmake --build ./build
      - name: CPack
        run: (cd build; cpack)
      - name: Test installation
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ matrix.os.image }}
          options: -v ${{ github.workspace }}:/host --security-opt seccomp=unconfined
          run: |
            apt-get update -y
            apt-get install -y /host/build/*.deb
      - name: Upload artifacts
        uses: 'actions/upload-artifact@v2'
        with:
          name: libSMCE-DEB-${{ matrix.os.name }}${{ matrix.os.codename }}
          path: build/*.deb
      - name: Collect CMake coverage information
        run: ci/scan-cmake-commands.sh
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./cmake-codecov-report.json
  package-rpm:
    name: Package per-distro RPMs (${{ matrix.os.name }} ${{ matrix.os.codename }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: Fedora
            codename: 33
            image: fedora:33
            profile: Fedora33
          - name: Fedora
            codename: 34
            image: fedora:34
            profile: FedoraHost
          - name: Fedora
            codename: 35
            image: fedora:35
            profile: FedoraHost
#         - name: Fedora
#           codename: Rawhide
#           image: fedora:rawhide
#           profile: FedoraHost
          - name: openSUSE
            codename: Leap
            image: opensuse/leap
            profile: OpenSuseLeap
            c: gcc-10
            cxx: g++-10
#         - name: OpenMandriva
#           codename: Lx4.2
#           image: openmandriva/4.2
#           profile: FedoraHost
    container:
      image: ${{ matrix.os.image }}
      options: --security-opt seccomp=unconfined
    env:
      CC: ${{ matrix.os.c }}
      CXX: ${{ matrix.os.cxx }}
    steps:
       - name: Setup workdir
         run: mkdir /tmp/wk && cd /tmp/wk
       - name: Fetch deps
         run: |
           [[ '${{ matrix.os.name }}' == 'Fedora' ]] && dnf install -y perl jq which tar git cmake rpmdevtools rpmlint ninja-build gcc-c++ openssl-devel || true
           [[ '${{ matrix.os.name }}' == 'openSUSE' ]] && zypper install -y perl jq which tar git cmake rpmdevtools rpm-build rpmlint ninja gcc10-c++ libopenssl-devel || true
           [[ '${{ matrix.os.name }}' == 'OpenMandriva' ]] && dnf install -y perl jq which tar git cmake rpmdevtools rpm-build rpmlint ninja clang glibc-devel lib64openssl-devel || true
       - uses: actions/checkout@v3
       - name: Setup global CMake interceptor
         run: ci/setup-cmake-interceptor.sh
       - name: CMake Configure
         run: cmake -G Ninja -DSMCE_BUILD_PROFILE=${{ matrix.os.profile }} -S ./ -B ./build
       - name: CMake Build
         run: cmake --build ./build
       - name: CPack
         run: cmake --build ./build --target package
       - name: rpmlint
         run: rpmlint ./build/*.rpm || true
       - name: Test installation
         if: matrix.os.name != 'openSUSE'
         uses: addnab/docker-run-action@v3
         with:
           image: ${{ matrix.os.image }}
           options: -v ${{ github.workspace }}:/host --security-opt seccomp=unconfined
           run: |
             [[ '${{ matrix.os.name }}' == 'openSUSE' ]] && zypper install -y dnf rpm-repos-openSUSE || true
             dnf install -y /host/build/*.rpm
             dnf install -y cmake gcc-c++
             [[ '${{ matrix.os.name }}' == 'OpenMandriva' ]] && dnf install -y make glibc-devel || true
             cd /host/extra/samples/stduart
             CC=gcc CXX=g++ cmake -S . -B build
             cmake --build ./build
             ./build/stduart --help
       - name: Upload artifacts
         uses: 'actions/upload-artifact@v2'
         with:
           name: libSMCE-RPM-${{ matrix.os.name }}${{ matrix.os.codename }}
           path: build/*.rpm
       - name: Collect CMake coverage information
         run: ci/scan-cmake-commands.sh
       - name: Upload coverage to Codecov
         uses: codecov/codecov-action@v2
         with:
           files: ./cmake-codecov-report.json
